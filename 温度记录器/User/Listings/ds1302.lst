C51 COMPILER V9.60.0.0   DS1302                                                            05/05/2022 14:22:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\ds1302.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE ..\Driver\ds1302.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver;..\Inc
                    -lude;..\User) DEBUG OBJECTEXTEND PRINT(.\Listings\ds1302.lst) TABS(2) OBJECT(.\Objects\ds1302.obj)

line level    source

   1          #include <config.h>
   2          
   3          struct sTime {  //日期时间结构体定义
   4              unsigned int  year;  //年
   5              unsigned char mon;   //月
   6              unsigned char day;   //日
   7              unsigned char hour;  //时
   8              unsigned char min;   //分
   9              unsigned char sec;   //秒
  10              unsigned char week;  //星期
  11          };
  12          
  13          /* 发送一个字节到DS1302通信总线上 */
  14          void DS1302ByteWrite(unsigned char dat)
  15          {
  16   1          unsigned char mask;
  17   1          
  18   1          for (mask=0x01; mask!=0; mask<<=1)  //低位在前，逐位移出
  19   1          {
  20   2              if ((mask&dat) != 0) //首先输出该位数据
  21   2                  DS1302_IO = 1;
  22   2              else
  23   2                  DS1302_IO = 0;
  24   2              DS1302_CK = 1;       //然后拉高时钟
  25   2              DS1302_CK = 0;       //再拉低时钟，完成一个位的操作
  26   2          }
  27   1          DS1302_IO = 1;           //最后确保释放IO引脚
  28   1      }
  29          /* 由DS1302通信总线上读取一个字节 */
  30          unsigned char DS1302ByteRead()
  31          {
  32   1          unsigned char mask;
  33   1          unsigned char dat = 0;
  34   1          
  35   1          for (mask=0x01; mask!=0; mask<<=1)  //低位在前，逐位读取
  36   1          {
  37   2              if (DS1302_IO != 0)  //首先读取此时的IO引脚，并设置dat中的对应位
  38   2              {
  39   3                  dat |= mask;
  40   3              }
  41   2              DS1302_CK = 1;       //然后拉高时钟
  42   2              DS1302_CK = 0;       //再拉低时钟，完成一个位的操作
  43   2          }
  44   1          return dat;              //最后返回读到的字节数据
  45   1      }
  46          /* 用单次写操作向某一寄存器写入一个字节，reg-寄存器地址，dat-待写入字节 */
  47          void DS1302SingleWrite(unsigned char reg, unsigned char dat)
  48          {
  49   1          DS1302_CE = 1;                   //使能片选信号
  50   1          DS1302ByteWrite((reg<<1)|0x80);  //发送写寄存器指令
  51   1          DS1302ByteWrite(dat);            //写入字节数据
  52   1          DS1302_CE = 0;                   //除能片选信号
  53   1      }
  54          /* 用单次读操作从某一寄存器读取一个字节，reg-寄存器地址，返回值-读到的字节 */
C51 COMPILER V9.60.0.0   DS1302                                                            05/05/2022 14:22:23 PAGE 2   

  55          unsigned char DS1302SingleRead(unsigned char reg)
  56          {
  57   1          unsigned char dat;
  58   1          
  59   1          DS1302_CE = 1;                   //使能片选信号
  60   1          DS1302ByteWrite((reg<<1)|0x81);  //发送读寄存器指令
  61   1          dat = DS1302ByteRead();          //读取字节数据
  62   1          DS1302_CE = 0;                   //除能片选信号
  63   1          
  64   1          return dat;
  65   1      }
  66          /* 用突发模式连续写入8个寄存器数据，dat-待写入数据指针 */
  67          void DS1302BurstWrite(unsigned char *dat)
  68          {
  69   1          unsigned char i;
  70   1          
  71   1          DS1302_CE = 1;
  72   1          DS1302ByteWrite(0xBE);  //发送突发写寄存器指令
  73   1          for (i=0; i<8; i++)     //连续写入8字节数据
  74   1          {
  75   2              DS1302ByteWrite(dat[i]);
  76   2          }
  77   1          DS1302_CE = 0;
  78   1      }
  79          /* 用突发模式连续读取8个寄存器的数据，dat-读取数据的接收指针 */
  80          void DS1302BurstRead(unsigned char *dat)
  81          {
  82   1          unsigned char i;
  83   1          
  84   1          DS1302_CE = 1;
  85   1          DS1302ByteWrite(0xBF);  //发送突发读寄存器指令
  86   1          for (i=0; i<8; i++)     //连续读取8个字节
  87   1          {
  88   2              dat[i] = DS1302ByteRead();
  89   2          }
  90   1          DS1302_CE = 0;
  91   1      }
  92          /* 获取实时时间，即读取DS1302当前时间并转换为时间结构体格式 */
  93          void GetRealTime(struct sTime *time)
  94          {
  95   1          unsigned char buf[8];
  96   1          
  97   1          DS1302BurstRead(buf);
  98   1          time->year = buf[6] + 0x2000;
  99   1          time->mon  = buf[4];
 100   1          time->day  = buf[3];
 101   1          time->hour = buf[2];
 102   1          time->min  = buf[1];
 103   1          time->sec  = buf[0];
 104   1          time->week = buf[5];
 105   1      }
 106          /* 设定实时时间，时间结构体格式的设定时间转换为数组并写入DS1302 */
 107          void SetRealTime(struct sTime *time)
 108          {
 109   1          unsigned char buf[8];
 110   1          
 111   1          buf[7] = 0;
 112   1          buf[6] = time->year;
 113   1          buf[5] = time->week;
 114   1          buf[4] = time->mon;
 115   1          buf[3] = time->day;
 116   1          buf[2] = time->hour;
C51 COMPILER V9.60.0.0   DS1302                                                            05/05/2022 14:22:23 PAGE 3   

 117   1          buf[1] = time->min;
 118   1          buf[0] = time->sec;
 119   1          DS1302BurstWrite(buf);
 120   1      }
 121          /* DS1302初始化，如发生掉电则重新设置初始时间 */
 122          void InitDS1302()
 123          {
 124   1          unsigned char dat;
 125   1          struct sTime code InitTime[] = {  //2013年10月8日 12:30:00 星期二
 126   1              0x2022,0x04,0x29, 0x23,0x59,0x50, 0x05
 127   1          };
 128   1          
 129   1          DS1302_CE = 0;  //初始化DS1302通信引脚
 130   1          DS1302_CK = 0;
 131   1          dat = DS1302SingleRead(0);  //读取秒寄存器
 132   1      //    if ((dat & 0x80) != 0)      //由秒寄存器最高位CH的值判断DS1302是否已停止
 133   1      //    {
 134   1              DS1302SingleWrite(7, 0x00);  //撤销写保护以允许写入数据
 135   1              SetRealTime(&InitTime);      //设置DS1302为默认的初始时间
 136   1      //    }
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    411    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      26
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
