C51 COMPILER V9.60.0.0   KEYBOARD                                                          05/05/2022 14:22:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\keyboard.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE ..\Driver\keyboard.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver;..\I
                    -nclude;..\User) DEBUG OBJECTEXTEND PRINT(.\Listings\keyboard.lst) TABS(2) OBJECT(.\Objects\keyboard.obj)

line level    source

   1          #include <config.h>
   2          
   3          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
   4              { '1',  '2',  '3', 0x26 }, //数字键1、数字键2、数字键3、向上键
   5              { '4',  '5',  '6', 0x25 }, //数字键4、数字键5、数字键6、向左键
   6              { '7',  '8',  '9', 0x28 }, //数字键7、数字键8、数字键9、向下键
   7              { '0', 0x1B, 0x0D, 0x27 }  //数字键0、ESC键、  回车键、 向右键
   8          };
   9          unsigned char pdata KeySta[4][4] = {  //全部矩阵按键的当前状态
  10              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  11          };
  12          
  13          extern void KeyAction(unsigned char keycode);
  14          
  15          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  16          void KeyDriver()
  17          {
  18   1          unsigned char i, j;
  19   1          static unsigned char pdata backup[4][4] = {  //按键值备份，保存前一次的值
  20   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  21   1          };
  22   1          
  23   1          for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
  24   1          {
  25   2              for (j=0; j<4; j++)
  26   2              {
  27   3                  if (backup[i][j] != KeySta[i][j])    //检测按键动作
  28   3                  {
  29   4                      if (backup[i][j] != 0)           //按键按下时执行动作
  30   4                      {
  31   5                          KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  32   5                      }
  33   4                      backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
  34   4                  }
  35   3              }
  36   2          }
  37   1      }
  38          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
  39          void KeyScan()
  40          {
  41   1          unsigned char i;
  42   1          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
  43   1          static unsigned char keybuf[4][4] = {  //矩阵按键扫描缓冲区
  44   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
  45   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
  46   1          };
  47   1      
  48   1          //将一行的4个按键值移入缓冲区
  49   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  50   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  51   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  52   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  53   1          //消抖后更新按键状态
  54   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
C51 COMPILER V9.60.0.0   KEYBOARD                                                          05/05/2022 14:22:22 PAGE 2   

  55   1          {
  56   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
  57   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
  58   3                  KeySta[keyout][i] = 0;
  59   3              }
  60   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  61   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
  62   3                  KeySta[keyout][i] = 1;
  63   3              }
  64   2          }
  65   1          //执行下一次的扫描输出
  66   1          keyout++;         //输出索引递增
  67   1          keyout &= 0x03;   //索引值加到4即归零
  68   1          switch (keyout)   //根据索引，释放当前输出引脚，拉低下次的输出引脚
  69   1          {
  70   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  71   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  72   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  73   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  74   2              default: break;
  75   2          }
  76   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    379    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     49       2
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
